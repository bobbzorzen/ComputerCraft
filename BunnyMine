--This is a program for "bunny hole mining" aka efficient ore finder.

tArgs = {...} //fetches argument list.

local ignoreCount = tonumber(tArg[1])

function tryRefuel()
  local itemCount = 0
  local returnValue = false
  turtle.select(16)
  itemCount = turtle.getItemCount(16)
  itemCount = itemCount -1
  if(itemCount ~= 0) then
    turtle.refuel(itemCount)
    returnValue = true
  end
  return returnValue
end

function tryDigDown()
  if(turtle.detectDown()) then
    turtle.digDown()
    if(turtle.detectDown) then
      return false
    else
      return true
    end
  end
end

function tryMoveDown()
  if(tryDigDown()) then
    if(turtle.moveDown()) then
      return true
    else
      if(turtle.getFuelLevel() > 0) then
        print("Unknown error, Move Unsuccessfull")
        return false
      else
        print("Turtle Requires more Fuel! Trying to refuel!")
        if(tryRefuel()) then
          print("Refuel successfull!")
        else
          print("Refuel UNSUCCESSFULL")
        end
        return false
      end
    end
  else
    print("BedRock or other indestructable block located")
    return false
  end
end

function tryDigForward()
  local digBlock = true
  if(turtle.detect()) then
    for(i=1, ignoreCount) do
      turtle.select(i)
      if(turtle.compare()) then
        digBlock = false
        break
      end
    end
    turtle.select(16)
    if(turtle.compare()) then
      turtle.dig()
      return true
    end
    if(digBlock) then
      turtle.dig()
    end
  end
  return digBlock
end

function reposition()
  turtle.dig()
  turtle.forward()
  turtle.dig()
  turtle.forward()
  turtle.turnRight()
  turtle.dig()
  turtle.forward()
  turtle.turnLeft()
end

local continue = true
local depthCount = 0
tryMoveDown()
tryMoveDown()
depthCount = 2
turtle.select(1)
turtle.placeUp()
while(continue) do
  for i = 1, 4 do
    tryDigForward()
    turtle.turnLeft()
  end
  if(not tryDigDown()) then
    continue = false
  end
end

while(depthCount ~= 0) then
  turtle.up()
  depthCount = depthCount + 1
  if(depthCount == 2) then
    turtle.digUp()
  end
end
turtle.select(1)
turtle.placeDown()
reposition()
